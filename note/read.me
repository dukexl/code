第一 git note
1 git add xxx
2 git commit -m "xxx"
3 git push
4 git config --global credential.helper store
5 vscode add

远程仓库
1，git remote add origin 远程仓库地址
2，git pull origin master --allow-unrelated-histories
3，git branch --set-upstream-to=origin/master master
4，git push



第二 cmake note
1.cmake_minimum_required(VERSION 3.17)  每个工程构建都需要一个最低版本
2.project(project_name)  每个工程都需要一个工程名
3.set(CLIENT_SRCS src/main.cpp)  设置变量名，后面可以${CLIENT_SRCS} 表示main.cpp
4.add_executable(project_name CLIENT_SRCS) 生成project_name
5.target_include_directories(client PRIVATE include) 加头文件
  include_directories(./include) 增加头文件目录

6.add_library(<name> [STATIC | SHARED | MODULE]
            [EXCLUDE_FROM_ALL]
            [source1] [source2] [...])  指定的源文件生成链接文件
  target_link_libraries(<target> [item1] [item2] [...]
                      [[debug|optimized|general] <item>] ...)
  eg:target_link_libraries(client PRIVATE common) 目标文件与库文件进行连接
  link_directories(lib)  eg:link_directories(./lib) 添加lib文件目录

7.add_subdirectory(tests) 增加测试

8.include(CTest)  用来载入并运行来自于文件或模块的CMake代码

9.c++ 标准版本
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
set(CMAKE_CXX_STANDARD 14)

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
set(CMAKE_CXX_STANDARD 14)

10.add_test
add_test(NAME craft_test
         COMMAND craft --gtest_output='xml:report.xml')


第三 linux系统的一些问题
echo 'source /opt/centos/devtoolset-1.1/enable' >> ~/.bash_profile 
source ~/.bash_profile 每次重新电脑后gcc会变成低版本的gcc


第四 C++ 基础问题
1）enable_shared_from_this 用来保活
若一个类 T 继承 std::enable_shared_from_this<T> ，则会为该类 T 提供成员函数： shared_from_this 。 
当 T 类型对象 t 被一个为名为 pt 的 std::shared_ptr<T> 类对象管理时，调用 T::shared_from_this 成员函数，
将会返回一个新的 std::shared_ptr<T> 对象，它与 pt 共享 t 的所有权
